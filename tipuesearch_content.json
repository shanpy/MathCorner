{"pages":[{"url":"http://shanpy.github.io/mathcorner/how-to-build-a-basic-nikola-blog-and-deloy-to-github-page.html","text":"[ TOC ] One of my goal for 2015 is to learn Python. To prepare for this, I decided to create a new blog site, based on Python. After doing some research, I decide to use Nikola to build my blog. One of the reason I choose Nikola is that it has great support to IPython Notebook . Lots of Thanks to Damian Avila ! Your blog is so useful and great for Nikola beginners like me! 1. Create Virtual Environment Before you install Nikola, a good practice is to build a virual environment. You can install Virtualenv and use it. Since I had Anaconda installed, I just type conda create -n techblog python=3.4 anaconda to create a virtual environment called \"techblog\" with python 3.4. You can define your own name and python version. 2. Install Nikola and Necessary Component First, make sure you use your virtual enviorment. command is: source activate name_of_environment I suggest you to use pip to install followiing components: - nikola - requests - sphinx - pyzmq - tornado(?) - jinja2 - webassets (if you want to use USE_BUNDLES) - markdown (if you want to use markdown) - ipython (if you want to use ipython notebook) For example, you type follwing command in your terminal: pip install nikola requests sphinx markdown ipython pyzmq tornado jinja2 webasset In the next following steps, make sure you are under your virtual environment. 3. Initialize Nikola Type nikola init in your terminal, where you want to build your site in a subfolder of current location. You will be asked following questions: - Destination: Name of the folder your site will be - Site Title - Site Author - Author's Email - Site Description - Site URL : This is the url that when you click header of your site, the page will jump to. You can set this later in conf.py file. If you type one, make sure it ends with a / . - Default Language: I use en but you can refer Nikola website for more option. - Time Zone: Short name for your time zone. I use EST . For example. - Comment System: Nikola support popular comment system such as Disqus , Google+ and Facebook . You will be asked to enter comment system site identifier if required. 4. Change Theme (Optional) If you want to change theme of your website, You can find a list of themes from Nikiola Website . Note any theme that has ipython in its name supports IPython Notebook. Then, do cd your_folder to get to the folder that Nikola just created for you. Type nikola install_theme name_of_theme to install theme. You may need to change some setting in conf.py file, so read instructions in your terminal carefully. 5. Configure and Build Site First, open conf.py file and configure it as your requests: If you didn't do some setup in step 3 in terminal, you can found them here. For example, you can re-edit SITE_URL if you haven't done so. If you have installed new theme and want to change to it, change THEME = option to your installed theme. Some theme may also want you to change NAVIGATION_LINKS or other settings. If you want to use IPython Notebook or Markdown, find POSTS = option and add (\"posts/*.md\", \"posts\", \"post.tmpl\"),(\"posts/*.ipynb\", \"posts\", \"post.tmpl\"), . If you don't need lots of new pages, I suggest you not change PAGES setting. Set INDEX_TEASERS = to True to enable teaser. Now you can just put .. TEASER_END or <!--TEASER_END--> in your post to make index page only show first part of your post If you have installed webassets , you can set USE_BUNDLES= to True to speed up your site. I skip the process of creating new post. Note if you create a IPython Notebook post, you can edit information such as slugs, dates, tags in .meta file, which is automatically generated with .ipynb file. Now you can type nikola build to build your site. A list of rendered file will appear. What user can see from your website is in output folder. If you have any external file, such as PDF or IMAGE , you can put it in files folder. After building, you can type nikola serve to host your site locally. By default, you site can be open from http://localhost:8000/ 6. Deploy Site to Github Pages I find great help from solution of Damian's blog . I used his method to deploy this site to one of my Github page. Please make sure you do follwing steps except git initiate every time you want to make change: First, create a repository. You can use default \"user.github.io\" repo, but since I prefer a project Github Page , so I create a repo called \"techblog\". After installed Git to your machine, cd to your site folder, then type git init to initiate. Do git remote add origin https://github.com/your_user_name/your_repo.git to add repo, with a name origin . Push all of your content to master branch first Do git checkout -b gh-pages to create and swich to gh-pages. You can skip -b after you do this once. Do git rm -rf . Do git commit -am \"Your Commit\" to commit for gh-pages Do git push origin gh-pages Do git checkout master to switch back to master branch Do git branch -D gh-pages first to avoid commit error. (I tried to skip this step before but I got a git commit error, so I suggest you do this step first) Do git subtree split --prefix output -b gh-pages to only transfer content in output folder from master to gh-pages Do git push -f origin gh-pages:gh-pages to force push Do git branch -D gh-pages again to delete local gh-pages branch 7. Add Custom Domain to Your Github Page (Optional) You may want to add custom domain to your Github page. Github has a tutorial here . Since I'm hosting my domain (pengyin-shan.com) on GoDaddy, I followed instructions in this blog . A few things I want to mention: CNAME file should be put to your files folder so that when you following steps above to push to Github, this file will show in gh-pages branch. The content of CNAME file should be bare subdomain of your custom domain, which means you can not use http://test.com or http:test.com/blog . You can only have one custdom domain. I think based on Github's role, even though you are hosting project Github pages, your custom domain has to be \"test.com\" instead of \"test.com/name_of_repo\" On Jan 1st, 2015, the IP address of Github Project Page are 192.30.252.153 and 192.30.152.154 . If you have A (Host), make sure your @ is pointing to these two IPs. If you finish these settings, you should be able to host your Nikola blog on Github Page. Please feel free to let me know if you have any comments.","tags":"Python","title":"How to Build A Basic Nikola Blog and Deploy to Github Page"},{"url":"http://shanpy.github.io/mathcorner/python-basics.html","text":"This post is transferred from my old blog site . This is a reading note for Appendix in the book of Python for Data Analysis , published by O'Reilly, 2012 . The appendix of this book describes python basic syntax and information, which I think is very useful for python beginners like me. Basic Information In [2]: # Semicolons can be used to seperate multiple statements on a single line: a = 5 ; b = 6 ; c = 7 ; a Out[2]: 5 Functions can take both potential and keyword arguments: result = f(a,b,c,d=5,e='foo') Python is passing by Reference . If you have a , then b=a implys b and a are referring same object. In [3]: #Example a = [ 1 , 2 , 3 ] b = a a . append ( 4 ) b Out[3]: [1, 2, 3, 4] Python is a Strongly-Typed language, which means '5'+5 will return error. In [4]: #In python, `isinstance` can be use to check **variable type**. #Example a = 5 print ( isinstance ( a , int )) print ( isinstance ( a , float )) True False In [5]: #iter function is used to check if a variable is iterable or not. #In Python, String is iterable. #Example a = \"Test\" iter ( a ) Out[5]: <str_iterator at 0x7fcac8a2c390> In python, a module is a .py file containing functions and variables. In [6]: # list() is used to create a new list object # is | isnot always be used to check if two variables refer to same object, # or if a variable is None a = [ 1 , 2 , 3 ] c = list ( a ) print ( a == c ) print ( a is c ) True False In [7]: # a//b means floor divide. It will drop and fractional reminder a = 25 b = 3 a // b Out[7]: 8 In python, calculation is done immediately . No lazy evaluation I python, String and Tuple are immutable (can not be changed after defining). lists , dicts , NumPy Arrays or classes are mutable . In [8]: # literal string can have single or double quotes # triple quotes is for string with line break c = ''' This is a string with line breaks ''' c #print(c) will remove \\n Out[8]: &apos;\\n This is a string\\n with line breaks\\n &apos; In [9]: # replace() is can replace substring with another piece of string: a = \"This is string\" b = a . replace ( \"string\" , \"very long string\" ) b Out[9]: &apos;This is very long string&apos; In [10]: # str() convert most objects to string a = 5.5 b = str ( a ) b Out[10]: &apos;5.5&apos; In [11]: # '+' can be used to concatenate strings a = \"test string\" b = a + \" and another test string\" b Out[11]: &apos;test string and another test string&apos; In [12]: #You can can 'template' for string template = '%.2f %s are $%d' #you want all lowercase here output = template % ( 4.558 , 'Tomcat' , 1 ) output #.2f: 2 decimal points # %s: string # %d: integer Out[12]: &apos;4.56 Tomcat are $1&apos; In [13]: # You can judge empty by using bool() print ( bool ([])) print ( bool ( '' )) print ( bool ( 0 )) print ( bool ( 1 )) print ( bool ( 'tset' )) False False False True True In [15]: # pass can be used to end blocks when there is no return value x = 0 if x < 0 : pass List This post is one of Python Basics reading notes. You can find all reading notes from the collection of \"Python\" tag. Parts of information for this notes comes from Python Tutorial on tutorialspoint.com . In [1]: #List are tuples with content modifying. #You can create list by using '[]' or 'list()' function a = [ 2 , 3 , 'test' , None ] #None must start from upper case print ( a ) tup = \"1\" , \"2\" b = list ( tup ) print ( b ) [2, 3, &apos;test&apos;, None] [&apos;1&apos;, &apos;2&apos;] In [2]: #Add to List: #append() append element to end of list #insert(num,char) append to specific location b . insert ( 5 , 'insert' ) #if your location is out of boundary, char is added to end of list b Out[2]: [&apos;1&apos;, &apos;2&apos;, &apos;insert&apos;] In [3]: # in, +, * can be used to list also # extend() equals to +, but it is quicker. # Important: extend() change original variable, instead of creating new variable c = a + b print ( c ) print ( 1 in c ) print ( c * 2 ) d = a . extend ([ \"test\" ]) print ( d ) #You can only get None here, because extend() not create new variable print ( a ) [2, 3, &apos;test&apos;, None, &apos;1&apos;, &apos;2&apos;, &apos;insert&apos;] False [2, 3, &apos;test&apos;, None, &apos;1&apos;, &apos;2&apos;, &apos;insert&apos;, 2, 3, &apos;test&apos;, None, &apos;1&apos;, &apos;2&apos;, &apos;insert&apos;] None [2, 3, &apos;test&apos;, None, &apos;test&apos;] In [4]: # list.index(var) return lowest index of variable # list.insert(index,var) insert variable to sepcial index # list.pop(var=list[-1]) removes the last variable from list and return it # list.remove(var) removes the first such value in list print ( c ) c . remove ( '2' ) print ( c ) c . pop ( 2 ) #2 here is the index of element print ( c ) c . insert ( 1 , \"more\" ) print ( c ) print ( c . index ( \"more\" )) [2, 3, &apos;test&apos;, None, &apos;1&apos;, &apos;2&apos;, &apos;insert&apos;] [2, 3, &apos;test&apos;, None, &apos;1&apos;, &apos;insert&apos;] [2, 3, None, &apos;1&apos;, &apos;insert&apos;] [2, &apos;more&apos;, 3, None, &apos;1&apos;, &apos;insert&apos;] 1 In [5]: # sort() is used to do in-place sort for list # sort(key=\"\") is used for sorting with parameter # or sort(key=[function]) to sort by a function b . sort ( key = len ) b Out[5]: [&apos;1&apos;, &apos;2&apos;, &apos;insert&apos;] In [6]: # \"import bisect\" is ued for binary-search first, then insert to a sorted list # bisect.bisect(list,element) can find location where the element shoudl be inserted # bisect.insort(list,element) can insert element to sorted location. This apply to original value! import bisect d = [ 1 , 2 , 4 , 6 , 8 , 8 , 10 ] #make sure list has been sorted first print ( bisect . bisect ( d , 4 )) #find where 4 should be inserted to print ( bisect . insort ( d , 4 )) #then insert 4 to list. This produce None print ( d ) 3 None [1, 2, 4, 4, 6, 8, 8, 10] In [7]: # slice() can used to list or tuples, using 'start, stop-1' index # slice() can also be used for insertion # index of slice() can be negative print ( d [ 1 : 3 ]) d [ 2 : 4 ] = [ \"a\" , \"b\" ] print ( d ) print ( d [ 5 :]) print ( d [ - 5 : - 1 ]) #Here, for negative index, start index is exclusive, and last element has index 0 print ( d [:: 3 ]) # :: can be used for every nth element print ( d [:: - 1 ]) # So [::-1] can be used to reverse a list ! [2, 4] [1, 2, &apos;a&apos;, &apos;b&apos;, 6, 8, 8, 10] [8, 8, 10] [&apos;b&apos;, 6, 8, 8] [1, &apos;b&apos;, 8] [10, 8, 8, 6, &apos;b&apos;, &apos;a&apos;, 2, 1] In [8]: # Like tuple, you can still use cmp(list1,list2), len(list), max(list), min(list) # list.reverse() can be used to reverse a list d . reverse () d Out[8]: [10, 8, 8, 6, &apos;b&apos;, &apos;a&apos;, 2, 1] In [9]: # There can be nested list for loop data = [[ 'tom' , 'mat' ],[ 'ann' , 'beth' ]] result1 = [ name for names in data for name in names if name . count ( 'n' ) < 2 ] print ( result1 ) #Code above is the same as code below result2 = [] for names in data : for name in names : if name . count ( 'n' ) < 2 : result2 . append ( name ) print ( result2 ) [&apos;tom&apos;, &apos;mat&apos;, &apos;beth&apos;] [&apos;tom&apos;, &apos;mat&apos;, &apos;beth&apos;] Tuple This post is one of Python Basics reading notes. You can find all reading notes from the collection of \"Python\" tag. Parts of information for this notes comes from Python Tutorial on tutorialspoint.com . In [14]: #Tuple is a one-dimentional, fiexed lengh, immutable sequence of python objects #This means once a tuple has been created, you can not edit it anymore #tuple() can be used to create tuple tup = 4 , 5 , 6 print ( tup ) tup_2 = 3 , #you can write tuple with empty space print ( tup_2 ) nested_tup = ( 4 , 5 , 6 ),( 7 , 8 ) print ( nested_tup ) string_tup = tuple ( \"Hellow world\" ) print ( string_tup ) (4, 5, 6) (3,) ((4, 5, 6), (7, 8)) (&apos;H&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;, &apos;w&apos;, &apos; &apos;, &apos;w&apos;, &apos;o&apos;, &apos;r&apos;, &apos;l&apos;, &apos;d&apos;) In [8]: #tuple can be concatenated using the `+` operator nested_tup + string_tup Out[8]: ((4, 5, 6), (7, 8), &apos;H&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;, &apos;w&apos;, &apos; &apos;, &apos;W&apos;, &apos;o&apos;, &apos;r&apos;, &apos;l&apos;, &apos;d&apos;, &apos; &apos;, &apos;!&apos;) In [3]: #tuple can have multiple concatenated effect nested_tup * 2 Out[3]: ((4, 5, 6), (7, 8), (4, 5, 6), (7, 8)) In [6]: #tuple can be unpacked a , b , c = tup print ( a ) print ( b ) print ( c ) 4 5 6 In [13]: #count() counts occurrance in tuple string_tup . count ( 'w' ) Out[13]: 2 In [23]: #tuple can be accessed via index, starting from 0. #to get substring, note end index is exclusive #negative number can be used to count from back print ( tup [ - 1 ]) #Note -1 means last item in tuple print ( tup [ 1 :]) print ( tup [ 0 : 2 ]) 6 (5, 6) (4, 5) In [ ]: #del can be used to delete tuple del nested_tup In [19]: #in can be used for tuple for existence testing #len() can be used to check length of tuple print ( 4 in tup ) len ( string_tup ) True Out[19]: 12 In [22]: #Since tuple is iterable, you can use for loop for a tuple for x in tup : print x 4 5 6 In [25]: #cmp(tuple1, tuple2) compare elements of two tuples #return 1 if first item is larger, return 0 if equal, return -1 if first item is smaller cmp ( tup , tup_2 ) Out[25]: 1 In [26]: #max() and min() return max/min item from tuple print ( max ( tup )) print ( min ( tup )) 6 4 In [ ]: Dictionary and Set This post is one of Python Basics reading notes. You can find all reading notes from the collection of \"Python\" tag. Parts of information for this notes comes from Python Tutorial on tutorialspoint.com . Dictionary In [53]: # Dict can be created by \"{}\" # Insertion and Access operations for dict are the same as tuples and lists # Dict use key-value pair, so you can access values by calling \"[key]\" # Values can be anything, such as string, number or list, tuple # However keys has to be immutable objects. It is call hashability. # hash() can be used to check hashablity. For example,list/set is not hashable d = {( 1 , 2 , 3 ):[ 1 , 2 , 3 ], \"test\" : \"Helloworld\" } print ( d ) print ( d [( 1 , 2 , 3 )]) {&apos;test&apos;: &apos;Helloworld&apos;, (1, 2, 3): [1, 2, 3]} [1, 2, 3] In [54]: # More than one same key is allowed. # If there exists more than one same key, last value will be chosen e = { \"a\" : 1 , \"a\" : 2 } e [ \"a\" ] Out[54]: 2 In [55]: # Just like list, \"in\" can be used to check existence # Just like list, \"del\" and \"pop\" are the functions for removing # Just like list, cmp(dict1,dict2) and len(dict) are available # clear() can be used to clear all items in dict d = { 'a' :[ 1 , 2 , 3 ], 'b' : \"Helloworld\" } del d [ 'a' ] print ( d ) print ( d . pop ( 'b' )) #Return the item that was removed print ( None in d ) d . clear () len ( d ) {&apos;b&apos;: &apos;Helloworld&apos;} Helloworld False Out[55]: 0 In [56]: # keys() and values() function return the keys and values for a dict object, as dict # items() return a list of key-value tuples d = { 'a' :[ 1 , 2 , 3 ], 'b' : \"Helloworld\" } print ( d . keys ()) print ( d . values ()) print ( d . items ()) [&apos;a&apos;, &apos;b&apos;] [[1, 2, 3], &apos;Helloworld&apos;] [(&apos;a&apos;, [1, 2, 3]), (&apos;b&apos;, &apos;Helloworld&apos;)] In [57]: # update() can merge one dict with another dict d . update ({ \"c\" :( 5 , 6 )}) d Out[57]: {&apos;a&apos;: [1, 2, 3], &apos;b&apos;: &apos;Helloworld&apos;, &apos;c&apos;: (5, 6)} In [58]: # [key] can be used to update exising key-value pair or insert new key-value pair d [ 'b' ] = 5 d [ 'd' ] = None d Out[58]: {&apos;a&apos;: [1, 2, 3], &apos;b&apos;: 5, &apos;c&apos;: (5, 6), &apos;d&apos;: None} In [59]: # str(dict) can return a string of dict, include all commas and curly braces # type(var) return type of varaible str ( d ) Out[59]: \"{&apos;a&apos;: [1, 2, 3], &apos;c&apos;: (5, 6), &apos;b&apos;: 5, &apos;d&apos;: None}\" In [60]: # dict.copy() return a copy of dict # dict1.update(dict2) add content of dict2 to dict1. Repeated value will not be copyed e = d . copy () print ( e ) e . update ( d ) print ( e ) e . update ({ \"e\" : \"Helloworld\" }) print ( e ) {&apos;a&apos;: [1, 2, 3], &apos;c&apos;: (5, 6), &apos;b&apos;: 5, &apos;d&apos;: None} {&apos;a&apos;: [1, 2, 3], &apos;c&apos;: (5, 6), &apos;b&apos;: 5, &apos;d&apos;: None} {&apos;a&apos;: [1, 2, 3], &apos;c&apos;: (5, 6), &apos;b&apos;: 5, &apos;e&apos;: &apos;Helloworld&apos;, &apos;d&apos;: None} In [61]: # dict.fromkeys(list,value) takes a list of items and values, then produce a new dict with these keys and values # value is optional. If value existing, all keys will be assigned this value f = dict . fromkeys ([ \"a\" , \"b\" ],[ 5 , 10 ]) #Note we use \"dict\" directly here f Out[61]: {&apos;a&apos;: [5, 10], &apos;b&apos;: [5, 10]} In [62]: # dict.get(key) return the value for this key. If key is not available, return None # dict.has_key(key) return true if key exists. Otherwise return false # dict.setdefault(key) is similar to get() except if key is not there, a key will be created print ( f . get ( 'c' )) print ( f . has_key ( 'c' )) f . setdefault ( 'c' ) f None False Out[62]: {&apos;a&apos;: [5, 10], &apos;b&apos;: [5, 10], &apos;c&apos;: None} Set In [63]: # Set is an unsorted collection of unqiue items. # Set can be created by \"{}\" or set() a = set ( \"test\" ) #if you use set(var), var must be iterable a #repeated value will be automatically removed Out[63]: {&apos;e&apos;, &apos;s&apos;, &apos;t&apos;} In [68]: # \"&\" , \"|\" and \"-(difference)\", \"&#94;(xor)\" can be applied to set # set can use \"==\" b = a | { 'e' } print ( b ) print ( a == b ) set([&apos;s&apos;, &apos;e&apos;, &apos;t&apos;]) True In [69]: # issubset() and issuperset() can be used to decide subset or superset # isdisjoint() is used to check if two sets has any elements in common. Return true if two sets are totally different b = { 'e' , 's' } print ( a . issuperset ( b )) print ( a . isdisjoint ( b )) True False Function This post is one of Python Basics reading notes. You can find all reading notes from the collection of \"Python\" tag. Parts of information for this notes comes from Python Tutorial on tutorialspoint.com . In [3]: # Potential Argument: def f_name(x,y) # Keyword Argument: def f_name(x=1.5) Keyword argument allows over-write #In python, functions are objects. So they can be re-used as normal objects def f (): a = ( 1 , 2 , 3 ) b = [ 1 , 2 , 3 ] return a , b #You can return mutiple items in one function c , d = f () c , d Out[3]: ((1, 2, 3), [1, 2, 3]) In [11]: # Lambda Function in Python: lambda [arg1 [,arg2,.....argn]]:expression # Lambda function only return one value # Lambda function only can access varaible in its own namespace. It cannot access global variable def short_f ( x ): return x * 2 lam_f = lambda x : x * 2 #You need to assign lambda function to a variable a = 5 print ( short_f ( a )) print ( lam_f ( a )) 10 10 In [18]: # A closure is any dynamically-generated function, returned by another function # Closure function continue to have access to the function where it is created def f ( a , b ): #Closure function needs to make its parameter relating to previous parameter def formatter ( x = a ): return ( x * b ) return formatter #Return name of closure function fmt = f ( 1 , 2 ) fmt () Out[18]: 2 In [19]: # Currying: your can use \"partial\" to derving new functions from existing one # You need \"from functools import partial\" before you use \"partial\" def add_num ( x , y ): return x + y from functools import partial add_5 = partial ( add_num , 5 ) # Now add_5 is a function that use add_num content, and second parameter is 5 add_5 ( 4 ) Out[19]: 9 In [37]: #Python has build-in enumerate function: # 1. for i, v in enumerate(collection_name). i means the index, v is the value # 2. x for y in enumerate(collection_name) a = [ 'a' , 2 ,( 1 , 2 )] d = {} for i , v in enumerate ( a ): d . update ({ i : v }) print ( d ) print ({( i , v ) for i , v in enumerate ( a )}) {0: &apos;a&apos;} {0: &apos;a&apos;, 1: 2} {0: &apos;a&apos;, 1: 2, 2: (1, 2)} set([(1, 2), (2, (1, 2)), (0, &apos;a&apos;)]) In [38]: #Python has sorted() function which return a sorted list from any sequence sorted ( 'Hellow' ) #Always return a list Out[38]: [&apos;H&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;, &apos;w&apos;] In [45]: #Python has zip() which pairs two sequnce and create a list of tuples # Unzip using \"zip(*[item])\" seq1 = [ 5 , 6 , \"test\" ] seq2 = { \"a\" : 1 , \"b\" : 2 } seq3 = ( 11 , 22 , \"test2\" ) #If items in two seqs are not coresponding, extra item will be skipped print ( zip ( seq1 , seq2 )) print ( zip ( seq1 , seq3 )) seq4 , seq5 , seq6 = zip ( * [( 'a' , 1 , \"bb\" ),( 11 , 12 ,( 1 , 2 )),( \"test\" , \"test2\" , \"test3\" )]) print ( seq4 ) print ( seq5 ) print ( seq6 ) [(5, &apos;a&apos;), (6, &apos;b&apos;)] [(5, 11), (6, 22), (&apos;test&apos;, &apos;test2&apos;)] (&apos;a&apos;, 11, &apos;test&apos;) (1, 12, &apos;test2&apos;) (&apos;bb&apos;, (1, 2), &apos;test3&apos;) Functions for Filter and the Operating System open(path) for open file. Default is read-only. Opened file can be treated as list : for line in open(path): #... open(path,'w') : write-only mode open(path,'r') : read-only mode open(path,'a') : append to existing/create if not exist open(path,'b') : add to mode for binary files File Related Functions: read([size]) : return data as string with [size] bytes readlines([size]) : return list of lines in file write([size]) / writelines([size]) : same as above close() : close file flush() : flush internal i/o buffer to disk seek(pos) : move to position pos tell() : return current file position as integer closed() : return true if file is closed IPython Basics In IPython, print is used to print more readable result. Same as what's happening in terminal, <tab> button in IPython can do auto-complete . object introspection : ?variable_name in IPython can provide information about this variable: function_name?? will show this function's source code if exists. *name* is wildcard operation. It can list result that is combined by ‘XXnameX' or ‘nameXXX' %paste and %cpaste can takes code on clipboard then execute it in a single block in the shell magic command : It is prefixed by the percentage symbol %","tags":"Python","title":"Python Basics"},{"url":"http://shanpy.github.io/mathcorner/use-amazon-ec2-to-host-ipython-notebook.html","text":"[ TOC ] Recentely I read a great article about Hosting IPython Notebook on Amazon AWS Free Tier from Scratch . This tutorial explains the way to host IPython Notebook using a Amazon EC2 Micro Instance. I followed this tutorial and successfully hosted an IPython notebook on a Ubuntu 14 Guest AMI . I want to record some of important steps I took while following this tutorial: Note: You can use nano to edit ipython_notebook_config.py file. It is located at ~/.ipython/profile_nbserver/ . Security Group When you set up rules for Security Groups , make sure you include SSH , HTTPS and 8888 all of these. Lack of one can make your IPython Notebook fail. If you forget to do so when you set up the machine, you can set up later in your EC2 management console. Elastic Ip The tutorial suggest you link an Elastic IP to your instance so that everytime you try to access your instance in browser, you can type new ip address instead of long public DNS . To do this, click Elastic IPs option in you EC2 Dashboard menu, which is in NETWORK & SECURITY section. On right panel, click Allocate New Address button. Then click Yes in the pop-up window. Now a IP address should be generated. Rememeber to associate your instance with this IP address. Select this IP address, then click Associate Address button. A pop-up window will appear. Click Instance then select your instance in drop-dowm menu. You can also do other setting here. Click Associate to associate your instance to this IP . Now you just need to type: https://your_elastic_ip:port_number to your IPython Notebook. Make IPython Run as Service You may want you IPython notebook still works after you shutdown your terminal/ SSH . I got solution from this StackOverflow post . I got screen by typing sudo apt-get install screen , then do ipython server & . If this not work for you, try screen ipython s instead","tags":"Python","title":"Use Amazon EC2 to Host IPython Notebook"}]}